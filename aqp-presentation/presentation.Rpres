```{r setup, echo=FALSE, results='hide'}
library(knitr, quietly = TRUE)
opts_chunk$set(message=FALSE, warning=FALSE, dpi=120, fig.align='center', dev='CairoPNG', dev.args=list(pointsize=10), tidy=TRUE, tidy.opts=list(width.cutoff=100), cache=TRUE)
```


Algorithms for Quantitative Pedology: a toolkit for digital soil morphometrics
========================================================
author: D.E. Beaudette, P. Rouder, J.M. Skovlin
date: October 7, 2014
transition: none
width: 1024
height: 800
css: custom.css


## Main Ideas
1. framework and vocabulary for soil data modeling
2. specialized data structures to accommodate **most** soil information (soilDB companion package)
3. data vizualization via. sketches
4. re-sampling via slicing / slabbing and related vizualization
5. numerical classification
6. extensible (examples in companion sharpshootR package)

## Digital Soil Morphometrics Examples
1. ML profile generation
2. profile-level aggregate / stock estimation
3. continuous-representation of data collected from genetic horizons (e.g. depth-function estimation)
4. TODO: coalate recent work and find some more!
5. Pierre: any recent work examples?
6. scavenge from AQP website



```{r make-repeatable, tidy=FALSE, echo=FALSE}
# load libraries
library(aqp)
library(soilDB)
library(sharpshootR)
library(lattice)
library(plyr)
library(Hmisc)

# set options
options(width=100, stringsAsFactors=FALSE)
```

## Preaching to the Choir: why R? | thiosdkasdjlksjdflkajsdlkfjal;skdjf;lkajsd;lfS

- repeatable, self-documenting work:
 - uni-variate / multivariate summaries
 - graphical representations of complex data
 - 2800+ packages on CRAN: 100+ packages on GIS, ecology, and **soils**!
 
- algorithm development by experts, application by trained users
 - testing by eye: simple graphical "grammar" used to plot data
 - formalized testing: correlation, regression, classification, ordination, ...
 - I/O capabilities: file, URL, SOAP, SQL, ODBC, PDF, PNG, SHP, KML, ...
 - optimizers, matrix operations, custom data structures, ...




aqp package: Algorithms for Quantitative Pedology
========================================================
<span class="oneliner">a "vocabulary" for soil data analysis</span>

- special data structures: avoids annoying book-keeping code
- visualization: soil profile sketches
- aggregation: depth-slice summaries
- classification: pair-wise dissimilarity of profiles

![alt text](static-figures/genhz-sketch.png)

<span class="link-to-details">&#8594;&nbsp;[aqp manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/index.html)</span>



## SoilProfileCollection Objects
class: small-code
<span class="oneliner">custom datatype to store/access hierarchy of soil profile information</span>

```{r SPC-1}
# sample dataset, extracted from NASIS
data(loafercreek)
str(loafercreek, 2)
```

```{r SPC-2, fig.width=10, fig.height=4, echo=FALSE}
par(mar=c(0,0,0,0))
plot(loafercreek[1:10, ], name='hzname', print.id=FALSE, cex.names=0.8, axis.line.offset=-4, max.depth=150)
```


SoilProfileCollection Objects
========================================================

Typical pedon/site data:
```
id, top, bottom, name, group
1,  0,   10,     A,    g1
1,  10,  18,     AB,   g1
          ...
2,  12,   22,    E,    g2
2,  22,   45,    Bhs1, g2
```

Converting `data.frame` &#8594; `SoilProfileCollection`:
```{r SPC-3, eval=FALSE}
x <- read.csv(file=...)
# promote to SoilProfileCollection
depths(x) <- id ~ top + bottom
# move "site data" into @site
site(x) <- ~ group
```

Functions that return `SoilProfileCollection`:
```{r SPC-4, eval=FALSE}
x <- fetchOSD()
x <- fetchKSSL()
x <- fetchPedonPC()
x <- fetchNASIS()
x <- fetchNASIS_component_data()
```

<span class="link-to-details">&#8594;&nbsp;[SoilProfileCollection tutorial](https://r-forge.r-project.org/scm/viewvc.php/*checkout*/docs/aqp/aqp-intro.html?root=aqp)</span>


SoilProfileCollection Objects
========================================================
class: small-code

- <span style="font-size: 80%;">object inspection</span>
```{r SPC-functions-1, eval=FALSE, tidy=FALSE}
idname(sp4) # pedon ID name
horizonDepths(sp4) # colum names containing top and bottom depths
depth_units(sp4) # defaults to 'cm'
metadata(sp4) # data.frame with 1 row
profile_id(sp4) # vector of profile IDs
```

- <span style="font-size: 80%;">overloads to common functions</span>
```{r SPC-functions-2, eval=FALSE, tidy=FALSE}
length(sp4) # number of profiles in the collection
nrow(sp4) # number of horizons in the collection
names(sp4) # column names from site and horizon data
min(sp4) # shallowest profile depth in collection
max(sp4) # deepest profile depth in collection
sp4[i, j] # get profile "i", horizon "j"
```

- <span style="font-size: 80%;">getting / setting of components</span>
```{r SPC-functions-3, eval=FALSE, tidy=FALSE}
horizons(sp4) # get / set horizon data
site(sp4)  # get / set site data
diagnostic_hz(sp4) # get / set diagnostic horizons
proj4string(sp4) # get / set CRS
coordinates(sp4) # get / set coordinates
```

- <span style="font-size: 80%;">coercion to `SpatialPointsDataFrame` or `data.frame`</span>
```{r SPC-functions-4, eval=FALSE, tidy=FALSE}
as(sp4, 'SpatialPointsDataFrame')
as(sp4, 'data.frame')
```




Plotting SoilProfileCollection Objects
========================================================
<span class="oneliner">flexible generation of soil profile sketches using "base graphics"</span>

![alt text](static-figures/aqp_profile_plot_example_sjer.png)

<span class="link-to-details">&#8594;&nbsp;[plotSPC() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/SPC-plotting.html)</span>


Slice-Wise Aggregation
========================================================
<span class="oneliner">aggregation along regular "depth-slices" and within groups</span>

![alt text](static-figures/properties_by_mlra.png)

<span class="link-to-details">&#8594;&nbsp;[slab() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/SPC-slab-methods.html)</span>



Pair-Wise Dissimilarity [see related talk]
========================================================

![alt text](static-figures/dend_with_profiles-SJER.png)

<span class="link-to-details">&#8594;&nbsp;[profile_compare() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/profile_compare-methods.html)</span>



soilDB: OSD Summaries
========================================================
class: small-code
<span class="oneliner">basic morphologic / taxonomic data from OSD and SC databases [<a href="http://casoilresource.lawr.ucdavis.edu/see/">SoilWeb</a>]</span>

```{r soilDB-OSD, fig.width=10, fig.height=5, eval=TRUE, tidy=FALSE}
# soils of interest
s.list <- c('hornitos', 'argonaut', 'mokelumne', 'dunstone', 'auburn', 'pentz', 'pardee', 'peters', 'amador', 'laniger')

# fetch data from SoilWeb server and return as SoilProfileCollection
s <- fetchOSD(s.list)

# plot
par(mar=c(0,0,0,0))
plot(s, name='hzname', id.style='side', cex.name=0.75, axis.line.offset=-4.5)
```


soilDB: Soil Series Extent
========================================================
class: small-code
<span class="oneliner">simplified series extent maps [<a href="http://casoilresource.lawr.ucdavis.edu/see/">SoilWeb</a>]</span>

```{r soilDB-series-extent, eval=FALSE}
amador <- seriesExtent("amador") # result is a SpatialPolygonsDataFrame
writeOGR(amador, driver='ESRI Shapefile', ...) # save to SHP
```

![alt text](static-figures/series-extent-example.png)

<span class="link-to-details">&#8594;&nbsp;[series extent tutorial](https://r-forge.r-project.org/scm/viewvc.php/*checkout*/docs/soilDB/series-extent.html?root=aqp)</span>


soilDB: KSSL Data
========================================================
class: small-code
<span class="oneliner">characterization and current taxonomic data [<a href="http://casoilresource.lawr.ucdavis.edu/see/">SoilWeb</a>]</span>

```{r soilDB-KSSL, eval=FALSE}
musick <- fetchKSSL('musick') # result is a SoilProfileCollection
```

![alt text](static-figures/kssl-slab-example.png)

<span class="link-to-details">&#8594;&nbsp;[fetchKSSL() tutorial](https://r-forge.r-project.org/scm/viewvc.php/*checkout*/docs/soilDB/KSSL-demo.html?root=aqp)</span>





sharpshootR: Soil Taxonomy Visualization
========================================================
class: small-code
<span class="oneliner">profile sketches organized by taxonomy</span>

```{r sharpshootR-1, fig.width=12, fig.height=5, eval=TRUE}
# soils of interest
s.list <- c('hornitos', 'perkins', 'argonaut', 'inks', 'mokelumne', 'dunstone', 'auburn', 'pentz', 'pardee', 'peters', 'amador', 'laniger')

# fetch data from SoilWeb server and return as SoilProfileCollection
s <- fetchOSD(s.list)

# organize and plot according to subgroup level taxonomic data
SoilTaxonomyDendrogram(s, cex.taxon.labels=0.8)
```

<span class="link-to-details">&#8594;&nbsp;[SoilTaxonomyDendrogram() manual page](http://aqp.r-forge.r-project.org/sharpshootR-html-manual/SoilTaxonomyDendrogram.html)</span>


sharpshootR: Component Relationships
========================================================
<span class="oneliner">investigate the relationship between component data from SSURGO / NASIS</span>

```{r sharpshootR-comp-relationship-1, fig.width=15, fig.height=15, results='hide', echo=TRUE, eval=TRUE, tidy=FALSE}
# get data from SDA
q <- "SELECT component.mukey, comppct_r, lower(compname) as compname 
FROM legend 
INNER JOIN mapunit ON mapunit.lkey = legend.lkey 
LEFT OUTER JOIN component ON component.mukey = mapunit.mukey 
WHERE legend.areasymbol IN ('CA654') AND compkind IN ('Series', 'Taxadjunct')
ORDER BY mukey, comppct_r DESC"

# run query, process results, and return as data.frame object
res <- SDA_query(q)
```

```{r sharpshootR-comp-relationship-2, echo=TRUE, eval=FALSE, tidy=TRUE}
# compute adjacency matrix
m <- component.adj.matrix(res)
# plot component relationships as network diagram
par(mar=c(0,0,2,0)) 
plotSoilRelationGraph(m) 
title('CA654 Components')
```

<span class="link-to-details">&#8594;&nbsp;[SDA_query() manual page](http://aqp.r-forge.r-project.org/soilDB-html-manual/SDA_query.html)</span>
<br>
<span class="link-to-details">&#8594;&nbsp;[component.adj.matrix() manual page](http://aqp.r-forge.r-project.org/sharpshootR-html-manual/component.adj.matrix.html)</span>
<br>
<span class="link-to-details">&#8594;&nbsp;[plotSoilRelationGraph() manual page](http://aqp.r-forge.r-project.org/sharpshootR-html-manual/plotSoilRelationGraph.html)</span>


sharpshootR: Component Relationships
========================================================
title: none
```{r sharpshootR-comp-relationship-3, fig.width=15, fig.height=15, results='hide', echo=FALSE, eval=TRUE}
m <- component.adj.matrix(res)
par(mar=c(0,0,2,0)) ; plotSoilRelationGraph(m) ; title('CA654 Components')
```

sharpshootR: Component Relationships
========================================================
<span class="oneliner">generate hillslope position probability matrix by series name</span>

```{r sharpshootR-comp-relationship-4, eval=TRUE, echo=TRUE, results='hide'}
top.10 <- names(sort(table(res$compname), decreasing=TRUE)[1:10])
hp <- hillslope.probability(top.10)
```

```{r sharpshootR-comp-relationship-5, eval=TRUE, echo=FALSE}
print(hp)
```

Potential uses: 
- disaggregation clues
- stratification / weighting for sampling mission
- survey update work / ESD work

<span class="link-to-details">&#8594;&nbsp;[hillslope.probability() manual page](http://aqp.r-forge.r-project.org/sharpshootR-html-manual/hillslope.probability.html)</span>




OK, So What?
========================================================
class: small-code
<span class="oneliner">how about some examples</span>

- simulating data to feed / test models
```{r sim-intro, eval=FALSE, tidy=FALSE}
sim(SPC, n=10, hz.sd=2)
random_profile(id, n=c(3, 4, 5), min_thick=5, max_thick=30, n_prop=5)
```
- profile sketches ordered by meaningful gradient
```{r plotSPC-intro, eval=FALSE, tidy=FALSE}
plot(SPC, plot.order=new.order)
```
- applying functions by profile
```{r profileApply-intro, eval=FALSE, tidy=FALSE}
profileApply(SPC, <function>)
```
- "slicing": depth-wise alignment and extraction of data
```{r slice-intro, eval=FALSE, tidy=FALSE}
slice(SPC, 0:50 ~ sand + silt + clay)
```
- aggregating by "slab": group / depth-wise summaries
```{r slab-intro, eval=FALSE, tidy=FALSE}
# assuming no NA
slab(SPC, ~ sand + silt + clay, slab.fun=mean)
slab(SPC, ~ sand + silt + clay, slab.structure=c(0,10), slab.fun=mean)
slab(SPC, group ~ sand + silt + clay, slab.fun=mean)
```


Simulated Data: Horizon Depths and Designations
========================================================
class: small-code

```{r simulate-profiles-1, eval=FALSE, tidy=FALSE}
# source data are a single profile description of the Morley series as a data.frame
depths(b) <- id ~ top + bottom
# convert horizon colors into RGB
b$soil_color <- munsell2rgb(b$hue, b$value, b$chroma)
# simulate 15 profiles based on reported horizon thickness standard deviations 
b.sim <- sim(b, n=15, hz.sd=c(2,1,1,2,4,2,2,4))
# set depth units to inches
depth_units(b.sim) <- 'in'
```

![alt text](static-figures/morley-simulation.png)

<span class="link-to-details">&#8594;&nbsp;[sim() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/sim.html)</span>



Simulated Data: Physical Properties
========================================================
class: small-code
<span class="oneliner">simulation based on a [random walk](http://en.wikipedia.org/wiki/Random_walk)-- similar to highly stratified soils</span>

```{r simulate-profiles-2, tidy=FALSE, fig.width=8, fig.height=4}
# implicit loop via plyr::ldply, result is a data.frame
d <- ldply(1:10, random_profile, n=c(6, 7, 8), n_prop=1, method='random_walk')
# promote to SoilProfileCollection and plot
depths(d) <- id ~ top + bottom
par(mar=c(0,0,3,0))
plot(d, color='p1', axis.line.offset=-4, max.depth=150)
```

<span class="link-to-details">&#8594;&nbsp;[random_profile() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/random_profile.html)</span>


Simulated Data: Physical Properties
========================================================
class: small-code
<span class="oneliner">simulation based on the [logistic power peak](http://www.sciencedirect.com/science/article/pii/S0016706111002163) function-- more realistic anisotropy</span>

```{r simulate-profiles-3, tidy=FALSE, fig.width=8, fig.height=4}
# implicit loop via plyr::ldply, result is a data.frame
d <- ldply(1:10, random_profile, n=c(6, 7, 8), n_prop=1, method='LPP', 
lpp.a=5, lpp.b=10, lpp.d=5, lpp.e=5, lpp.u=25)
# promote to SoilProfileCollection and plot
depths(d) <- id ~ top + bottom
par(mar=c(0,0,3,0))
plot(d, color='p1', axis.line.offset=-4, max.depth=150)
```

<span class="link-to-details">&#8594;&nbsp;[random_profile() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/random_profile.html)</span>


Profile Sketches: Sierra Transects
========================================================
<span class="oneliner">data and concept from [Dahlgren et al.](http://www.sciencedirect.com/science/article/pii/S0016706197000347) and [Rasmussen et al.](https://www.soils.org/publications/sssaj/abstracts/71/1/225)</span>

```{r sierra-transect, eval=FALSE, tidy=FALSE}
x.g <- read.csv('dahlgren-granitics.csv', stringsAsFactors=FALSE)
x.a <- read.csv(file='rasmussen-andisitic-lahar.csv', stringsAsFactors=FALSE)

# convert colors
x.g$soil_color <- with(x.g, munsell2rgb(hue, value, chroma))
x.a$soil_color <- with(x.a, munsell2rgb(hue, value, chroma))

# init Soill Profile Collection objects
depths(x.g) <- id ~ top + bottom
site(x.g) <- ~ elev + MAAT + MAP + geo
# init Soill Profile Collection objects
depths(x.a) <- id ~ top + bottom
site(x.a) <- ~ elev + precip + MAP + MAT + veg + Fe_d_to_Fe_t

# index ordering to elevation in meters
g.new.order <- order(x.g$elev)
a.new.order <- order(x.a$elev)

# plot first figure
par(mfcol=c(1,2), mar=c(3,0,0,0))
plot(x.g, name='name', plot.order=g.new.order, cex.name=0.75, axis.line.offset=-4, id.style='side')
axis(1, at=1:length(x.g), labels=x.g$elev[g.new.order], line=-2)
# plot second figure
plot(x.a, name='name', plot.order=a.new.order, cex.name=0.75,  axis.line.offset=-4, id.style='side')
axis(1, at=1:length(x.a), labels=x.a$elev[a.new.order], line=-2)
```

Profile Sketches: Sierra Transects
========================================================
<span class="oneliner">pedogenic "sweet spot" along bio-climatic gradient</span>

![alt text](static-figures/sierra-transects-demo-1.png)


Magnesic Soils of California
========================================================
class: small-code
<span class="oneliner">data From [McGahan et al.](https://www.soils.org/publications/sssaj/abstracts/73/6/2087)</span>

```{r magnesic-soils-1, tidy=FALSE}
# load sample dataset, comes with aqp package
data(sp4)
# inspect first 4 rows x 12 columns
sp4[1:4, 1:12]
# upgrade to SoilProfileCollection
depths(sp4) <- id ~ top + bottom

# custom function for computing hz-thick wt. mean, accounting for missing data
wt.mean.ca.mg <- function(i) {
    # use horizon thickness as a weight
    thick <- i$bottom - i$top
    # function is from the Hmisc package
    m <- wtd.mean(i$ex_Ca_to_Mg, weights=thick, na.rm=TRUE)
    return(m)
    }

# apply custom function to each profile, save as "site-level" attribute
sp4$wt.mean.ca.to.mg <- profileApply(sp4, wt.mean.ca.mg)

# generate index ordering from small -> large Ca:Mg
new.order <- order(sp4$wt.mean.ca.to.mg)
```

<span class="link-to-details">&#8594;&nbsp;[profileApply() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/profileApply-methods.html)</span>


Magnesic Soils of California
========================================================
class: small-code

```{r magnesic-soils-2, tidy=FALSE, fig.width=8, fig.height=4}
# plot the data using our new order based on Ca:Mg
par(mar=c(4,0,3,0))
plot(sp4, name='name', color='ex_Ca_to_Mg', plot.order=new.order, cex.name=0.75, id.style='side', axis.line.offset=-4,)

# add an axis labeled with the sorting criteria
axis(1, at=1:length(sp4), labels=round(sp4$wt.mean.ca.to.mg, 3), cex.axis=1)
mtext(1, line=2.25, text='Horizon Thickness Weighted Mean Ex. Ca:Mg', cex=1)
```

<span class="link-to-details">&#8594;&nbsp;[sp4 sample data set](http://aqp.r-forge.r-project.org/aqp-html-manual/sp4.html)</span>


Slicing OSD Data = Map of Soil Color
========================================================
class: small-code

```{r conus-color-1, tidy=FALSE, eval=FALSE}
# read in OSD color data as CSV
x <- read.csv('data/osd-colors-original.csv.gz')
```

```
Ap,0,20,10YR,4,4,10YR,3,4,CECIL
Bt1,20,66,10R,4,8,10R,3,7,CECIL
Bt2,66,107,10R,4,8,10R,3,7,CECIL
BC,107,127,2.5YR,4,8,2.5YR,3,7,CECIL
C,127,203,2.5YR,4,8,2.5YR,3,7,CECIL
```

```{r conus-color-2, tidy=FALSE, eval=FALSE}
# re-order by series, then depth
x <- x[order(x$series, x$top), ]

# convert Munsell to RGB
x.rgb <- with(x, munsell2rgb(matrix_wet_color_hue, 
                             matrix_wet_color_value, 
                             matrix_wet_color_chroma, 
                             return_triplets=TRUE))

# init SoilProfileCollection object
depths(g) <- series ~ top + bottom

# slice at specific depths, keeping only  r, g, b
# ignore bad horizonation with strict=FALSE
g.slices <- slice(g, c(5, 10, 15, 25) ~ r + g + b, just.the.data=TRUE, strict=FALSE)

# save depth slices as CSV files, import into GIS and make map
write.csv(g.slices[g.slices$top == 5, c('series', 'r', 'g', 'b')], ...)
write.csv(g.slices[g.slices$top == 10, c('series', 'r', 'g', 'b')], ...)
write.csv(g.slices[g.slices$top == 15, c('series', 'r', 'g', 'b')], ...)
write.csv(g.slices[g.slices$top == 25, c('series', 'r', 'g', 'b')], ...)
```

<span class="link-to-details">&#8594;&nbsp;[slice() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/SPC-slice-methods.html)</span>



Slicing OSD Data = Map of Soil Color [5 cm]
========================================================
![alt text](static-figures/5cm-preview.jpg)

Slicing OSD Data = Map of Soil Color [10 cm]
========================================================
![alt text](static-figures/10cm-preview.jpg)

Slicing OSD Data = Map of Soil Color [15 cm]
========================================================
![alt text](static-figures/15cm-preview.jpg)

Slicing OSD Data = Map of Soil Color [25 cm]
========================================================
![alt text](static-figures/25cm-preview.jpg)



Summarize Clay vs Depth by Geology
========================================================
class: small-code

```{r ca630-geol-clay, tidy=FALSE, eval=FALSE}
pedons <- fetchNASIS()
# ... details on generalization of geologic classes ommitted ...
# aggregate by major geologic type, default slab.fun = hdquantile
a <- slab(pedons, generalized_bedrock ~ clay)

# plot with lattice graphics
xyplot(top ~ p.q50 | generalized_bedrock, upper=a$p.q75, lower=a$p.q25, data=a, ylim=c(180,-5), ylab='Depth (cm)', xlab='Clay Content (%)', strip=strip.custom(bg=grey(0.85)), as.table=TRUE, panel=panel.depth_function, prepanel=prepanel.depth_function, scales=list(y=list(tick.number=7, alternating=3), x=list(alternating=1)), subset=variable == 'clay', layout=c(6,1), cf=a$contributing_fraction, sync.colors=TRUE, alpha=0.25)
```

![alt text](static-figures/ca630-bedrock-clay.png)

<span class="link-to-details">&#8594;&nbsp;[slab() manual page](http://aqp.r-forge.r-project.org/aqp-html-manual/SPC-slab-methods.html)</span>


Wrap-Up
========================================================

- **getting soils data** can be difficult and time-consuming
- DSM requires considerable **data processing**
- ESI/ESD work requires detailed **analysis** of soil profile collections or aggregate soils data

AQP can help:
- "fetch" your data from NASIS, KSSL, SDA, SCAN, SoilWeb, etc.
- [SoilProfileCollection](https://r-forge.r-project.org/scm/viewvc.php/*checkout*/docs/aqp/aqp-intro.html?root=aqp) objects are powerful
- innovative constructs: `slice()`, `slab()`, `SPC[i,j]`
- pair-wise dissimilarity: `profile_compare()`
- visual comparisons and non-parametric summaries *vs.* hypothesis testing

&#8594;&nbsp; ideas and code welcome, plenty of room for improvement


Thank You
========================================================
Questions, comments, ideas?

<br><br><br><br>
AQP Contributors:
- Pierre Roudier (Landcare Research)
- Jay Skovlin (USDA-NRCS)
- Stephen Roecker (USDA-NRCS)

<br>
Join the fun at the [AQP r-forge site](http://r-forge.r-project.org/projects/aqp/)
