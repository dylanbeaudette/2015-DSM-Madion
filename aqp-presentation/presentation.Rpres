```{r setup, echo=FALSE, results='hide', message=FALSE, warning=FALSE}
library(knitr, quietly = TRUE)
opts_chunk$set(message=FALSE, warning=FALSE, dpi=120, fig.align='center', dev='CairoPNG', dev.args=list(pointsize=10), tidy=TRUE, tidy.opts=list(width.cutoff=100), cache=TRUE)
```

```{r packages-data-pre-processing, tidy=FALSE, echo=FALSE}
# load libraries
library(aqp)
library(soilDB)
library(sharpshootR)
library(lattice)
library(plyr)
library(Hmisc)

# set options 
options(width=100, stringsAsFactors=FALSE)
```

Algorithms for Quantitative Pedology: a toolkit for digital soil morphometrics
========================================================
transition: none
width: 1024
height: 800
css: custom.css

D.E. Beaudette, P. Roudier, J.M. Skovlin


<br><br><br><br><br><br><br><br>
<span style="color: white; font-size:50%;">This document is based on `aqp` version `r utils::packageDescription("aqp", field="Version")` </span>



Soil data analysis is changing
===============================

- volume
- variety
- velocity (rate of change)

Emerging needs
=======================

- reproducibility
- automation
- scalability
- handling of complex data
- communication/outreach

Why R?
========================================================
 
- repeatable, self-documenting work:
 - 2800+ packages on CRAN: 100+ packages on GIS, ecology, and **soils**!
 - package system: algorithms + docs + sample data
 
- advanced data visualisation capabilities

- algorithm development by experts, application by trained users
 - testing by eye: simple graphical "grammar" used to plot data
 - formalized testing: correlation, regression, classification, ordination, ...
 - I/O capabilities: file, URL, SOAP, SQL, ODBC, PDF, PNG, SHP, KML, ...
 - optimizers, matrix operations, custom data structures, ...


Soil data analysis in theory
===================================

![alt text](static-figures/workflow-1.png)

In practice, it is a long road ...
===================================

![alt text](static-figures/workflow-2.png)

Improving the workflow
===================================

![alt text](static-figures/workflow-3.png)


aqp package: Algorithms for Quantitative Pedology
========================================================
class: smaller

![alt text](static-figures/sketches.png)

- **special data structures:** avoids annoying book-keeping code
- **visualization:** soil profile sketches, transect diagrams, Munsell &#8594;&nbsp; RGB
- **re-sampling:** regular depth-slicing or EA spline (coming soon)
- **aggregation:** summary by depth-slice or arbitrary "slabs"
- **classification:** pair-wise dissimilarity of profiles
- **utility functions:** soil depth, missing data eval, simulation, ...


What does it look like?
========================================================

- profile sketches ordered by meaningful gradient
```{r plotSPC-intro, eval=FALSE, tidy=FALSE}
plot(SPC, plot.order=new.order)
```

- applying functions by profile
```{r profileApply-intro, eval=FALSE, tidy=FALSE}
profileApply(SPC, <function>)
```

- "slicing": depth-wise alignment and extraction of data
```{r slice-intro, eval=FALSE, tidy=FALSE}
slice(SPC, 0:50 ~ sand + silt + clay)
```

- aggregating by "slab": group / depth-wise summaries
```{r slab-intro, eval=FALSE, tidy=FALSE}
# assuming no NA
slab(SPC, ~ sand + silt + clay, slab.fun=mean)
slab(SPC, ~ sand + silt + clay, slab.structure=c(0,10), slab.fun=mean)
slab(SPC, group ~ sand + silt + clay, slab.fun=mean)
```

- simulating data to feed / test models
```{r sim-intro, eval=FALSE, tidy=FALSE}
sim(SPC, n=10, hz.sd=2)
random_profile(id, n=c(3, 4, 5), min_thick=5, max_thick=30, n_prop=5)
```



SoilProfileCollection objects
========================================================
<span class="oneliner">custom datatype to store/access hierarchy of soil profile information</span>

```{r SPC-1, echo=FALSE}
# sample dataset, extracted from NASIS
library(soilDB)
data(loafercreek)
str(loafercreek, 2)
```

```{r SPC-2, fig.width=10, fig.height=4, echo=FALSE}
par(mar=c(0,0,0,0))
plot(loafercreek[1:10, ], name='hzname', print.id=FALSE, cex.names=0.8, axis.line.offset=-4, max.depth=150)
```





SoilProfileCollection objects
========================================================
class: small-code

- <span style="font-size: 80%;">object inspection</span>
```{r SPC-functions-1, eval=FALSE, tidy=FALSE}
idname(sp4) # pedon ID name
horizonDepths(sp4) # colum names containing top and bottom depths
depth_units(sp4) # defaults to 'cm'
metadata(sp4) # data.frame with 1 row
profile_id(sp4) # vector of profile IDs
```

- <span style="font-size: 80%;">overloads to common functions</span>
```{r SPC-functions-2, eval=FALSE, tidy=FALSE}
length(sp4) # number of profiles in the collection
nrow(sp4) # number of horizons in the collection
names(sp4) # column names from site and horizon data
min(sp4) # shallowest profile depth in collection
max(sp4) # deepest profile depth in collection
sp4[i, j] # get profile "i", horizon "j"
```

- <span style="font-size: 80%;">getting / setting of components</span>
```{r SPC-functions-3, eval=FALSE, tidy=FALSE}
horizons(sp4) # get / set horizon data
site(sp4)  # get / set site data
diagnostic_hz(sp4) # get / set diagnostic horizons
proj4string(sp4) # get / set CRS
coordinates(sp4) # get / set coordinates
```

- <span style="font-size: 80%;">coercion to `SpatialPointsDataFrame` or `data.frame`</span>
```{r SPC-functions-4, eval=FALSE, tidy=FALSE}
as(sp4, 'SpatialPointsDataFrame')
as(sp4, 'data.frame')
```


Munsell Color Conversion: RGB, LAB, HSV, etc.  
========================================================
![alt text](static-figures/munsell-soil_colors-LAB.png)


Plotting SoilProfileCollection Objects
========================================================
![alt text](static-figures/sketches-sjer.png)


Plotting SoilProfileCollection Objects
========================================================
![alt text](static-figures/sketches-sfrec.png)


Plotting SoilProfileCollection Objects
========================================================
![alt text](static-figures/OSD-dend.png)


Plotting SoilProfileCollection Objects
========================================================
![alt text](static-figures/mineralking-set1-elevation.png)

Plotting SoilProfileCollection Objects
========================================================
![alt text](static-figures/aggregate-clay-content.png)


Slice-Wise Aggregation
========================================================
![alt text](static-figures/properties_by_mlra.png)

Slice-Wise Aggregation
========================================================
![alt text](static-figures/kssl-slab-example.png)

Slice-Wise Aggregation
========================================================
![alt text](static-figures/aggregate-continuous-example.png)

Slice-Wise Aggregation
========================================================
![alt text](static-figures/aggregate-categorical-example.png)

Slice-Wise Aggregation
========================================================
another example of probability depth-functions here


Pair-Wise Dissimilarity
========================================================
![alt text](static-figures/AQP-num_soil_classification-example.png)


Pair-Wise Dissimilarity
========================================================
![alt text](static-figures/dend_with_profiles-SJER.png)












Concluding remarks
========================================================
class: smaller

- **managing soils data** can be difficult and time-consuming
- DSM requires considerable **data processing**
- DSM requires detailed **analysis** of soil profile collections or aggregate soils data

AQP can help:
- "fetch" your data from NASIS, KSSL, SDA, SCAN, SoilWeb, etc.
- [SoilProfileCollection](https://r-forge.r-project.org/scm/viewvc.php/*checkout*/docs/aqp/aqp-intro.html?root=aqp) objects are powerful
- innovative constructs: `slice()`, `slab()`, `SPC[i,j]`
- pair-wise dissimilarity: `profile_compare()`
- visual comparisons and non-parametric summaries

**most-importantly: focus on creative thinking, not coding**

<center>
Thank You!
<hr>
http://aqp.r-forge.r-project.org
</center>


